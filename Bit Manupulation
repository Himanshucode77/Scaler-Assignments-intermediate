
Q1. Single Number
Solved
Asked in:

SHARECHAT
TOPPR
AMAZON

Problem Description
Given an array of integers A, every element appears twice except for one. Find that integer that occurs once.

NOTE: Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?



Problem Constraints
2 <= |A| <= 2000000

0 <= A[i] <= INTMAX



Input Format
The first and only argument of input contains an integer array A.



Output Format
Return a single integer denoting the single element.



Example Input
Input 1:

 A = [1, 2, 2, 3, 1]
Input 2:

 A = [1, 2, 2]


Example Output
Output 1:

 3
Output 2:

 1


Example Explanation
Explanation 1:

3 occurs once.
Explanation 2:

1 occurs once.




Sol:
class Solution:
    # @param A : tuple of integers
    # @return an integer
    def singleNumber(self, A):
        n=len(A)
        xor= 0
        for i in range(0,n):
            xor=xor^A[i]
        return xor

---------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------

Q2. Add Binary Strings
Solved
Asked in:

FACEBOOK
MICROSOFT

Problem Description
Given two binary strings, return their sum (also a binary string).
Example:

a = "100"

b = "11"
Return a + b = "111".



Sol:
class Solution:
	# @param A : string
	# @param B : string
	# @return a strings
	def addBinary(self, A, B):
        ans=''
        n=len(A)
        m=len(B)
        carry=0
        for i in range(max(n,m)):
            summ=0
            if i<n:
                summ+=int(A[n-i-1])
            if i<m:
                summ+=int(B[m-i-1])
            summ+=carry
            if summ>1:
                carry=1
            else:
                carry=0
        
            ans+=str(summ%2)
        if carry>0:
            ans+='1'
        ans=ans[::-1]
        return((ans))
---------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------

Q3. Number of 1 Bits

Asked in:

ADOBE
YAHOO
QUALCOMM

Problem Description
Write a function that takes an integer and returns the number of 1 bits it has.


Problem Constraints
1 <= A <= 109


Input Format
First and only argument contains integer A


Output Format
Return an integer as the answer


Example Input
Input1:
11


Example Output
Output1:
3


Example Explanation
Explaination1:
11 is represented as 1011 in binary.



Sol:
class Solution:
    # @param A : integer
    # @return an integer
    def numSetBits(self, A):
        c=0
        while A>0:
            if (A&1 == 1):
                c+=1
            A>>=1
        return c

---------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------

Q4. Interesting Array

Problem Description
You have an array A with N elements. We have two types of operation available on this array :
We can split an element B into two elements, C and D, such that B = C + D.
We can merge two elements, P and Q, to one element, R, such that R = P ^ Q i.e., XOR of P and Q.
You have to determine whether it is possible to convert array A to size 1, containing a single element equal to 0 after several splits and/or merge?



Problem Constraints
1 <= N <= 100000

1 <= A[i] <= 106



Input Format
The first argument is an integer array A of size N.



Output Format
Return "Yes" if it is possible otherwise return "No".



Example Input
Input 1:

 A = [9, 17]
Input 2:

 A = [1]


Example Output
Output 1:

 Yes
Output 2:

 No


Example Explanation
Explanation 1:

 Following is one possible sequence of operations -  
 1) Merge i.e 9 XOR 17 = 24  
 2) Split 24 into two parts each of size 12  
 3) Merge i.e 12 XOR 12 = 0  
 As there is only 1 element i.e 0. So it is possible.
Explanation 2:

 There is no possible way to make it 0.




Sol:
class Solution:
    # @param A : list of integers
    # @return a strings
    def solve(self, A):
        n=len(A)
        ctr=0
        for i in range(0,n):
            if A[i]%2 != 0:
                ctr+=1
        if ctr % 2 != 0:
            return 'No'
        else:
            return 'Yes'

---------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------


Q5. Reverse Bits
Solved
Asked in:

NE
character backgroundcharacter
Stuck somewhere?
Ask for help from a TA and get it resolved.
Get help from TA.
Problem Description
Reverse the bits of an 32 bit unsigned integer A.



Problem Constraints
0 <= A <= 232



Input Format
First and only argument of input contains an integer A.



Output Format
Return a single unsigned integer denoting the decimal value of reversed bits.



Example Input
Input 1:

 0
Input 2:

 3


Example Output
Output 1:

 0
Output 2:

 3221225472


Example Explanation
Explanation 1:

        00000000000000000000000000000000    
=>      00000000000000000000000000000000
Explanation 2:

        00000000000000000000000000000011    
=>      11000000000000000000000000000000




Sol:
class Solution:
    # @param A : unsigned integer
    # @return an unsigned integer
    def reverse(self, A):
        ans=0
        for _ in range(0,32):
            ans <<= 1
            if A & 1 == 1:
                ans+=1
            A >>= 1
        return ans

---------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------

Q6. Help From Sam

Problem Description
Alex and Sam are good friends. Alex is doing a lot of programming these days. He has set a target score of A for himself.
Initially, Alex's score was zero. Alex can double his score by doing a question, or Alex can seek help from Sam for doing questions that will contribute 
1 to Alex's score. Alex wants his score to be precisely A. Also, he does not want to take much help from Sam.

Find and return the minimum number of times Alex needs to take help from Sam to achieve a score of A.


Problem Constraints
0 <= A <= 10^9


Input Format
The only argument given is an integer A.


Output Format
Return the minimum number of times help taken from Sam.


Example Input
Input 1:
A = 5
Input 2:

A = 3


Example Output
Output 1:
2
Output 2:

2


Example Explanation
Explanation 1:
Initial score : 0
Takes help from Sam, score : 1
Alex solves a question, score : 2
Alex solves a question, score : 4
Takes help from Sam, score: 5
Explanation 2:

Initial score : 0
Takes help from Sam, score : 1
Alex solves a question, score : 2
Takes help from Sam, score : 3


SOL:
class Solution:
    # @param A : integer
    # @return an integer
    def solve(self, A):
        c = 0
        while A > 0:
            if A & 1 == 1:
                c += 1
            A >>= 1
        return c

---------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------

Q7. Finding Good Days
Asked in:

SAMSUNG
ADOBE
CISCO

Problem Description
Alex has a cat named Boomer. He decides to put his cat to the test for eternity.

He starts on day 1 with one stash of food unit, every next day, the stash doubles.

If Boomer is well behaved during a particular day, only then she receives food worth equal to the stash produced on that day.

Boomer receives a net worth of A units of food. What is the number of days she received the stash?



Problem Constraints
1 <= A <= 231-1



Input Format
First and only argument is an integer A.



Output Format
Return an integer denoting the number of days Boomer was well behaved.



Example Input
Input 1:

A = 5
Input 2:

A = 8


Example Output
Output 1:

 2
Output 2:

 1


Example Explanation
Explanation 1:

 To eat a total of 5 units of food, Boomer behaved normally on Day 1 and on the Day 3.
Explanation 2:

 To eat a total of 8 units of food, Boomer behaved normally only on day 4.



SOL:
class Solution:
    # @param A : integer
    # @return an integer
    def solve(self, A):
        c = 0
        while A > 0:
            if A & 1 == 1:
                c += 1
            A >>= 1
        return c

---------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------

Q8. Single Number III
Asked in:

ACCOLITE
AMAZON
FACTSET

Problem Description
Given an array of positive integers A, two integers appear only once, and all the other integers appear twice.
Find the two integers that appear only once.

Note: Return the two numbers in ascending order.


Problem Constraints
2 <= |A| <= 100000
1 <= A[i] <= 109



Input Format
The first argument is an array of integers of size N.



Output Format
Return an array of two integers that appear only once.



Example Input
Input 1:
A = [1, 2, 3, 1, 2, 4]
Input 2:

A = [1, 2]


Example Output
Output 1:
[3, 4]
Output 2:

[1, 2]


Example Explanation
Explanation 1:
3 and 4 appear only once.
Explanation 2:

1 and 2 appear only once.



SOL:
class Solution:
    # @param A : list of integers
    # @return a list of integers
    def solve(self, A):
        yeo={}
        ans=[]
        for i in A:
            if i in yeo.keys():
                yeo[i]+=1
            else:
                yeo[i]=1
        #print(yeo)
        for i in yeo:
            if (yeo[i] < 2):
                ans.append(i)
        return sorted(ans)

---------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------

Q9. Maximum Satisfaction

Problem Description
Given an array of integers A of size N denoting the quality of the fruits. A[i] represents the fruit quality of the ith fruit.

Shaun needs to pick four fruits, but he needs to pick them so that his satisfaction value will be maximum.

If a, b, c, and d are fruit quality of the four fruits picked, then the satisfaction value(a, b, c, d) = (a & b & c & d) where & is bitwise AND operator.

Find the maximum satisfaction value Shaun can obtain.



Problem Constraints
4 <= N <= 105

1 <= A[i] <= 2 * 109



Input Format
The only argument given is the integer array A.



Output Format
Return the maximum satisfaction value Shaun can obtain.



Example Input
Input 1:

 A = [10, 20, 15, 4, 14]
Input 2:

 A = [2, 2, 7, 15]


Example Output
Output 1:

 4
Output 2:

 2


Example Explanation
Explanation 1:

 Shaun can pick fruits with fruits quality 20, 15, 4, 14 and satisfaction value is (20 & 15 & 4 & 15) = 4 
Explanation 2:

 Shaun will pick fruits with fruits quality 2, 2, 7, 15 and satisfaction value is(2 & 2 & 7 & 15) = 2



SOL:
class Solution:
    # @param A : list of integers
    # @return an integer
    def solve(self, A):
        ans = 0
        
        for i in range(0,32):           #[100000000000000000000000000000000000000]32bits (max value)      
            temp = ans | (1 << 31-i)    #[set last most bit value to mask the maximum value]
            count = 0
            for j in A:                 #[Iterate A to compare and exclude]
                if j & temp == temp:    #[exclude every values that doesnt match with max set bit binary number]  
                    count += 1          
            if count >= 4:
                ans = temp 
        return ans
---------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------
Q10. Bit Compression

Problem Description
Richard Hendricks, a mastermind in compression algorithms, is an employee of Hooli in Silicon Valley.
One day, he finally decided to quit and work on his new idea of the middle-out compression algorithm.

He needed to work at the bit - level to compress data. He, eventually, encountered this problem.
There is an array A of N integers. He has to perform certain operations on the elements.
In any one operation, two indices i and j (i < j) are chosen, and A[i] is replaced with A[i] & A[j],
and A[j] is replaced with A[i] | A[j], where & represents the Bitwise AND operation and | represents the Bitwise OR operation.
This operation is performed over all the pairs of integers in the array.

Help Richard find the Bitwise XOR of all the elements after performing the operations.



Problem Constraints
1 <= N <= 105
1 <= Ai <= 109


Input Format
The first argument is the integer array A.


Output Format
Return a single integer denoting the XOR of the elements after performing the operations.


Example Input
Input 1:
A = [1, 3, 5]
Input 2:

A = [1, 1, 1]


Example Output
Output 1:
7
Output 2:

1


Example Explanation
Explanation 1:
After performing the operations, the array becomes [1, 1, 7].
The XOR of all the elements of this array is 7.
There can be other possible arrays, but we can prove that the XOR will always be 7.
Explanation 2:

Since all the elements are equal. 
Even after applying the operations in any order, the array will be [1, 1, 1].
The XOR of all the elements of this array is 1.



SOL:
class Solution:
    # @param A : list of integers
    # @return an integer
    def compressBits(self, A):
        ans = 0
        for i in A:
            ans ^= i
        return ans

---------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------







---------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------






---------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------






---------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------
